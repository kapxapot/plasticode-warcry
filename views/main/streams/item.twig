{% extends 'main/layout.twig' %}

{% import 'macros.twig' as gm %}
{% import 'main/macros.twig' as m %}
{% import 'main/local_macros.twig' as lm %}

{% set with_charts = true %}

{% if can('streams', 'create') %}
    {% set sidebar_buttons = [m.create_button('streams', 'Добавить стрим')] %}
{% endif %}

{% block content %}
    <div class="panel panel-primary">
        {% set breadcrumbs = [
            { 'url': path_for('main.streams'), 'text': streams_title }
        ] %}
        {{ lm.panel_header(_context, title, {
            'buttons': [m.edit_button('streams', stream)]
        }) }}
        <div class="panel-body panel-body--nopad mb-1">
            <div class="embed-responsive embed-responsive-16by9">
                <iframe class="embed-responsive-item" src="https://player.twitch.tv/?channel={{ stream.stream_id }}" allowfullscreen="true" frameborder="0" scrolling="no"></iframe>
            </div>
        </div>
        <div class="panel-body body-nopad stream-footer" ng-cloak>
            <ul class="nav nav-tabs" role="tablist">
                {{ m.tab('about', 'Описание', true, '<i class="fas fa-info-circle"></i> <b>Описание</b>') }}
                {{ m.tab('chat', 'Чат', false, '<i class="fas fa-comments"></i> <b>Чат</b>') }}
                {% if stats.viewers %}
                    {{ m.tab('viewers', 'Статистика по зрителям за последние сутки', false, '<i class="fas fa-chart-area"></i> <b>День</b>') }}
                {% endif %}
                {% if stats.daily %}
                    {{ m.tab('daily', 'Стастистика по дням за последний месяц', false, '<i class="fas fa-chart-bar"></i> <b>Месяц</b>') }}
                {% endif %}
                {% if stats.games %} 
                    {{ m.tab('games', 'Статистика по играм за последний месяц' ~ (stats.games|length == 1 ? ". [Спойлер]: это " ~ stats.games[0].remote_game : ''), false, '<i class="fas fa-chart-pie"></i> <b>Игры</b>') }}
                {% endif %}
                {% if stats.logs %}
                    {{ m.tab('log', 'Журнал трансляций за последний месяц', false, '<i class="fas fa-history"></i> <b>Журнал</b>') }}
                {% endif %}
            </ul>
            <div class="tab-content">
                <div role="tabpanel" class="tab-pane fade in active" id="about">
                    {#% if stream.remote_logo %}
                        <img src="{{ stream.remote_logo }}" class="stream-logo" />
                    {% endif %#}

                    {% set s = stream %}

                    <div class="card-body__title lh-12 grey-5">
                        {% if stream.stream_url %}<a href="{{ stream.stream_url }}">{% endif %}{% if stream.remote_title %}{{ stream.remote_title }}{% else %}{{ stream.title }}{% endif %}{% if stream.stream_url %}</a>{% endif %}
                        {% if s.remote_online_at %}
                            {% if s.channel %}
                                {% if s.remote_online %}
                                    транслирует
                                {% else %}
                                    {{ s.verbs.broadcasted }}
                                {% endif %}
                            {% else %}
                                {% if s.remote_online %}
                                    играет
                                {% else %}
                                    {{ s.verbs.played }}
                                {% endif %}
                                в
                            {% endif %}
                            {{ s.remote_game }}
                        {% else %}
                            спит
                        {% endif %}
                    </div>
                    {% if s.remote_online_at %}
                        {% if s.remote_online %}
                            <div class="card-body__number mt-1">{{ s.remote_viewers }} <span class="gray-9">{{ s.nouns.viewers }}</span></div>
                        {% else %}
                            <div class="grey-7 mt-1">{{ gm.moment_from_now(s.remote_online_at_iso) }}</div>
                        {% endif %}
                        <div class="mt-1 br-word">{{ s.display_remote_status }}</div>
                    {% else %}
                        <div class="card-body__action">zzZzZz...</div>
                    {% endif %}

                    {% if stream.parsed_description %}
                        <div class="card-body__description mt-3">{{ stream.parsed_description|raw }}</div>
                    {% endif %}
                </div>
                <div role="tabpanel" class="tab-pane fade" id="chat">
                    <iframe src="https://www.twitch.tv/embed/{{ stream.stream_id }}/chat" frameborder="0" scrolling="no" height="500" width="100%"></iframe>
                </div>
                {% if stats.viewers %}
                    <div role="tabpanel" class="tab-pane fade" id="viewers">
                        <div id="legendViewers"></div>
                        <div class="chart-container">
                            <canvas id="chartViewers"></canvas>
                        </div>
                    </div>
                {% endif %}
                {% if stats.daily %}
                    <div role="tabpanel" class="tab-pane fade" id="daily">
                        <div id="legendDaily" class="mt-1"></div>
                        <div class="chart-container">
                            <canvas id="chartDaily"></canvas>
                        </div>
                    </div>
                {% endif %}
                {% if stats.games %}
                    <div role="tabpanel" class="tab-pane fade" id="games">
                        <div id="legendGames"></div>
                        <div class="chart-container chart-pie">
                            <canvas id="chartGames"></canvas>
                        </div>
                    </div>
                {% endif %}
                {% if stats.logs %}
                    <div role="tabpanel" class="tab-pane fade linkblock-big linkblock--spaced" id="log">
                        {% for log in stats.logs %}
                            <div class="icon-lg{% if not log.game.default %} icon-{{ log.game.result_alias }}-lg{% endif %} flex flex-v">
                                <div class="linkblock-title">{{ log.remote_game }}</div>
                                <div>{{ log.display_remote_status }}</div>
                                <div class="linkblock-subtext" title="{{ log.start_iso }} - {{ log.end_iso }}">
                                    {{ gm.moment(log.start_iso, 'D MMMM, H:mm') }} – {{ gm.moment(log.end_iso, 'H:mm') }}
                                    ({% if stream.remote_online and loop.first %}live{% else %}{{ gm.moment_from_now(log.end_iso) }}{% endif %})
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>
        </div>
        {% if stream.tag_links %}
            <div class="panel-footer">
                {% include 'components/tags.twig' with { 'tags': stream.tag_links } only %}
            </div>
        {% endif %}
    </div>
{% endblock %}

{% block more_js %}
    <script>
        moment.locale('{{ lang }}');

        {% if stats.viewers %}
            var ctxViewers = $('#chartViewers')[0].getContext('2d');
            var chartViewers = new Chart(ctxViewers, {
                type: 'line',
                data: {
                    datasets: [
                        {% for v_game, v_sets in stats.viewers.data %}
                            {% for v_data in v_sets %}
                                {
                                    label: '{{ v_game }}',
                                    data: [
                                        {% for r in v_data %}
                                            { x: '{{ r.iso }}', y: {{ r.remote_viewers }}}{% if not loop.last %},{% endif %}
                                        {% endfor %}
                                    ],
                                    statuses: [
                                        {% for r in v_data %}
                                            '{{ r.display_remote_status|e('js')|raw }}'{% if not loop.last %},{% endif %}
                                        {% endfor %}
                                    ],
                                    backgroundColor: pickColor({{ loop.parent.loop.index }}, 0, 0.2),
                                    borderColor: pickColor({{ loop.parent.loop.index }}, 0),
                                    pointRadius: 2,
                                    pointHitRadius: 2,
                                    pointHoverRadius: 2,
                                    tension: 0.2
                                }{% if not loop.last %},{% endif %}
                            {% endfor %}
                            {% if not loop.last %},{% endif %}
                        {% endfor %}
                    ]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }],
                        xAxes: [{
                            type: 'time',
                            time: {
                                min: '{{ stats.viewers.min_date }}',
                                max: '{{ stats.viewers.max_date }}',
                                unit: 'hour',
                                unitStepSize: 1,
                                displayFormats: {
                                    'hour': 'H'
                                }
                            },
                            ticks: {
                                autoSkip: true,
                                maxRotation: 0,
                                minRotation: 0
                            }
                        }]
                    },
                    tooltips: {
                        callbacks: {
                            footer: function(tooltipItems, data) {
                                var tooltipItem = tooltipItems[0];
                                var dataset = data.datasets[tooltipItem.datasetIndex];
                                var index = tooltipItem.index;

                                return dataset.statuses[index];
                            },
                            title: function(tooltipItems, data) {
                                var tooltipItem = tooltipItems[0];
                                var dataset = data.datasets[tooltipItem.datasetIndex];
                                var index = tooltipItem.index;

                                return moment(dataset.data[index].x).format('DD.MM.Y H:mm');
                            }
                        }
                    },
                    legend: {
                        display: false
                    },
                    legendCallback: function(chart) {
                        var text = [];
                        text.push('<ul class="legend legend-line">');
                        {% for v_game, v_sets in stats.viewers.data %}
                            text.push('<li>');
                            {#text.push('<span style="background-color: ' + pickColor({{ loop.index }}, 0) + '">&nbsp;</span>');#}
                            text.push('<span style="border-color: ' + pickColor({{ loop.index }}, 0) + '; background-color: ' + pickColor({{ loop.index }}, 0, 0.2) + '">&nbsp;</span>');
                            text.push('{{ v_game }}');
                            text.push('</li>');
                        {% endfor %}
                        text.push('</ul>');
                        return text.join('');
                    },
                    annotation: {
                        annotations: [
                            {
                                drawTime: "afterDatasetsDraw",
                                id: "today",
                                type: "line",
                                mode: "vertical",
                                scaleID: "x-axis-0",
                                value: moment().startOf('day'),
                                borderColor: "#ff666666",
                                borderWidth: 2,
                                label: {
                                    backgroundColor: "#77777766",
                                    content: "Сегодня",
                                    enabled: false
                                }
                            }
                        ]
                    }
                }
            });

            $('#legendViewers').html(chartViewers.generateLegend());
        {% endif %}
        
        {% if stats.daily %}
            var ctxDaily = $('#chartDaily')[0].getContext('2d');
            var chartDaily = new Chart(ctxDaily, {
                type: 'bar',
                data: {
                    labels: [
                        {% for r in stats.daily %}
                            moment('{{ r.date }}').format('D MMM'){% if not loop.last %},{% endif %}
                        {% endfor %}
                    ],
                    datasets: [{
                        label: 'Зрители',
                        data: [
                            {% for r in stats.daily %}
                                {{ r.peak_viewers }}{% if not loop.last %},{% endif %}
                            {% endfor %}
                        ],
                        weekDays: [
                            {% for r in stats.daily %}
                                moment('{{ r.date }}').format('ddd, D MMM'){% if not loop.last %},{% endif %}
                            {% endfor %}
                        ],
                        statuses: [
                            {% for r in stats.daily %}
                                '{{ r.peak_status|e('js')|raw }}'{% if not loop.last %},{% endif %}
                            {% endfor %}
                        ],
                        backgroundColor: pickColor(1, 0, 0.2),
                        borderColor: pickColor(1, 0),
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }],
                        xAxes: [{
                            ticks: {
                                autoSkip: true,
                                maxRotation: 0,
                                minRotation: 0
                            }
                        }]
                    },
                    tooltips: {
                        callbacks: {
                            footer: function(tooltipItems, data) {
                                var tooltipItem = tooltipItems[0];
                                var dataset = data.datasets[tooltipItem.datasetIndex];
                                var index = tooltipItem.index;

                                return dataset.statuses[index];
                            },
                            title: function(tooltipItems, data) {
                                var tooltipItem = tooltipItems[0];
                                var dataset = data.datasets[tooltipItem.datasetIndex];
                                var index = tooltipItem.index;

                                return dataset.weekDays[index];
                            }
                        }
                    },
                    legend: {
                        display: false
                    },
                    legendCallback: function(chart) {
                        var text = [];
                        text.push('<ul class="legend legend-line">');

                        {% set legend = [{ 'index': 1, 'text': 'Зрители (пик)' }] %}

                        {% for l in legend %}
                            text.push('<li>');
                            text.push('<span style="border-color: ' + pickColor({{ l.index }}, 0) + '; background-color: ' + pickColor({{ l.index }}, 0, 0.2) + '">&nbsp;</span>');
                            text.push('{{ l.text }}');
                            text.push('</li>');
                        {% endfor %}
                        text.push('</ul>');
                        return text.join('');
                    },
                    annotation: {
                        annotations: [
                            {% for i in 1..4 %}
                            {
                                drawTime: "afterDatasetsDraw",
                                id: "week{{ i }}",
                                type: "line",
                                mode: "vertical",
                                scaleID: "x-axis-0",
                                value: moment().startOf('isoWeek'){% if not loop.first %}.add(-{{ loop.index0 }}, 'weeks'){% endif %}.format('D MMM'),
                                borderColor: "#ff666666",
                                borderWidth: 1,
                                label: {
                                    backgroundColor: "#77777766",
                                    content: "Mon{{ loop.index }}",
                                    enabled: false/*,
                                    position: "top"*/
                                }
                            }{% if not loop.last %},{% endif %}
                            {% endfor %}
                        ]
                    }

                }
            });

            $('#legendDaily').html(chartDaily.generateLegend());
        {% endif %}

        {% if stats.games %}
            var ctxGames = $('#chartGames')[0].getContext('2d');
            var chartGames = new Chart(ctxGames, {
                type: 'doughnut',
                data: {
                    datasets: [{
                        data: [
                            {% for game in stats.games %}
                                {{ game.percent }}{% if not loop.last %},{% endif %}
                            {% endfor %}
                        ],
                        backgroundColor: [
                            {% for game in stats.games %}
                                pickColor({{ loop.index }} - 1, 0){% if not loop.last %},{% endif %}
                            {% endfor %}
                        ],
                        labels: [
                            {% for game in stats.games %}
                                '{{ game.remote_game|e('js') }}'{% if not loop.last %},{% endif %}
                            {% endfor %}
                        ]
                    },
                    {
                        data: [
                            {% for b in stats.blizzard %}
                                {{ b.value }}{% if not loop.last %},{% endif %}
                            {% endfor %}
                        ],
                        backgroundColor: [
                            {% for b in stats.blizzard %}
                                pickColor({{ loop.index }} - 1, 2){% if not loop.last %},{% endif %}
                            {% endfor %}
                        ],
                        labels: [
                            {% for b in stats.blizzard %}
                                '{{ b.label }}'{% if not loop.last %},{% endif %}
                            {% endfor %}
                        ]
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    cutoutPercentage: 0,
                    tooltips: {
                        callbacks: {
                            label: function(tooltipItem, data) {
                                var dataset = data.datasets[tooltipItem.datasetIndex];
                                var index = tooltipItem.index;

                                return dataset.labels[index] + ': ' + dataset.data[index] + '%';
                            }
                        }
                    },
                    legend: {
                        display: false
                    },
                    legendCallback: function(chart) {
                        var text = [];
                        text.push('<ul class="legend">');
                        var dataset = chart.data.datasets[0];
                        for (var i = 0; i < dataset.data.length; i++) {
                            text.push('<li>');
                            text.push('<span class="label" style="background-color: ' + dataset.backgroundColor[i] + '">' + dataset.data[i] + '</span>');
                            if (dataset.labels[i]) {
                                text.push(dataset.labels[i]);
                            }
                            text.push('</li>');
                        }
                        text.push('</ul>');
                        return text.join('');
                    },
                    animation: {
                        animateScale: true,
                        animateRotate: true
                    }
                }
            });

            $('#legendGames').html(chartGames.generateLegend());
        {% endif %}
    </script>
{% endblock %}
